/**
 * Wheel Fitment API
 * The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.
 *
 * OpenAPI spec version: v1
 * Contact: info@wheel-size.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Vehicle'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Vehicle'));
  } else {
    // Browser globals (root is window)
    if (!root.ws_api_client) {
      root.ws_api_client = {};
    }
    root.ws_api_client.VehiclesApi = factory(root.ws_api_client.ApiClient, root.ws_api_client.Vehicle);
  }
}(this, function(ApiClient, Vehicle) {
  'use strict';

  /**
   * Vehicles service.
   * @module api/VehiclesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VehiclesApi. 
   * @alias module:api/VehiclesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the vehiclesList operation.
     * @callback module:api/VehiclesApi~vehiclesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vehicle>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find OE and option fitments by model/year/trim
     * Find OE and option fitments that match the given manufacturer, model, year and trim.  Please use _**&#x60;GET /search/by_model/&#x60;**_ instead as it is deprecated at the current moment.
     * @param {String} make Manufacturer slug name, use _**&#x60;GET /makes/&#x60;**_ to get possible values (e.g. &#x60;mitsubishi&#x60;)
     * @param {String} model Model slug name, use _**&#x60;GET /models/&#x60;**_ to get possible values (e.g. &#x60;outlander&#x60;)
     * @param {Number} year You can use _**&#x60;GET /years/&#x60;**_ to get possible years (e.g. &#x60;2015&#x60;)
     * @param {Object} opts Optional parameters
     * @param {String} opts.trim Use *&#x60;slug&#x60;* from _**&#x60;GET /trims/&#x60;**_ methods here. (e.g. &#x60;2.0+GG2W&#x60;)
     * @param {Boolean} opts.onlyOem Show only original equipment wheels
     * @param {String} opts.lang Use this parameter anywhere in the API to get *&#x60;name&#x60;* field translation of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Market&#x60;**. Across the *&#x60;name&#x60;* this objects will have *&#x60;name_en&#x60;* field with original english name. By default &#x60;en&#x60; language is used.  Available languages: &#x60;en,de,ru,es,pt,fr,ja,zh-cn,zh-tw&#x60;. Currently translation works for chinese &#x60;zh-cn&#x60; language only
     * @param {module:api/VehiclesApi~vehiclesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vehicle>}
     */
    this.vehiclesList = function(make, model, year, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'make' is set
      if (make === undefined || make === null) {
        throw new Error("Missing the required parameter 'make' when calling vehiclesList");
      }

      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling vehiclesList");
      }

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling vehiclesList");
      }


      var pathParams = {
      };
      var queryParams = {
        'make': make,
        'model': model,
        'year': year,
        'trim': opts['trim'],
        'only_oem': opts['onlyOem'],
        'lang': opts['lang'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['user_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Vehicle];

      return this.apiClient.callApi(
        '/vehicles/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
