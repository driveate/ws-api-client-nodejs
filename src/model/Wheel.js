/**
 * Wheel Fitment API
 * The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.
 *
 * OpenAPI spec version: v1
 * Contact: info@wheel-size.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Pressure'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Pressure'));
  } else {
    // Browser globals (root is window)
    if (!root.ws_api_client) {
      root.ws_api_client = {};
    }
    root.ws_api_client.Wheel = factory(root.ws_api_client.ApiClient, root.ws_api_client.Pressure);
  }
}(this, function(ApiClient, Pressure) {
  'use strict';




  /**
   * The Wheel model module.
   * @module model/Wheel
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Wheel</code>.
   * @alias module:model/Wheel
   * @class
   */
  var exports = function() {
    var _this = this;
















  };

  /**
   * Constructs a <code>Wheel</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Wheel} obj Optional instance to populate.
   * @return {module:model/Wheel} The populated <code>Wheel</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('tire_pressure')) {
        obj['tire_pressure'] = Pressure.constructFromObject(data['tire_pressure']);
      }
      if (data.hasOwnProperty('rim')) {
        obj['rim'] = ApiClient.convertToType(data['rim'], 'String');
      }
      if (data.hasOwnProperty('rim_diameter')) {
        obj['rim_diameter'] = ApiClient.convertToType(data['rim_diameter'], 'Number');
      }
      if (data.hasOwnProperty('rim_width')) {
        obj['rim_width'] = ApiClient.convertToType(data['rim_width'], 'Number');
      }
      if (data.hasOwnProperty('rim_offset')) {
        obj['rim_offset'] = ApiClient.convertToType(data['rim_offset'], 'Number');
      }
      if (data.hasOwnProperty('tire')) {
        obj['tire'] = ApiClient.convertToType(data['tire'], 'String');
      }
      if (data.hasOwnProperty('tire_sizing_system')) {
        obj['tire_sizing_system'] = ApiClient.convertToType(data['tire_sizing_system'], 'String');
      }
      if (data.hasOwnProperty('tire_construction')) {
        obj['tire_construction'] = ApiClient.convertToType(data['tire_construction'], 'String');
      }
      if (data.hasOwnProperty('tire_width')) {
        obj['tire_width'] = ApiClient.convertToType(data['tire_width'], 'Number');
      }
      if (data.hasOwnProperty('tire_aspect_ratio')) {
        obj['tire_aspect_ratio'] = ApiClient.convertToType(data['tire_aspect_ratio'], 'Number');
      }
      if (data.hasOwnProperty('tire_diameter')) {
        obj['tire_diameter'] = ApiClient.convertToType(data['tire_diameter'], 'Number');
      }
      if (data.hasOwnProperty('tire_section_width')) {
        obj['tire_section_width'] = ApiClient.convertToType(data['tire_section_width'], 'Number');
      }
      if (data.hasOwnProperty('tire_is_82series')) {
        obj['tire_is_82series'] = ApiClient.convertToType(data['tire_is_82series'], 'Boolean');
      }
      if (data.hasOwnProperty('load_index')) {
        obj['load_index'] = ApiClient.convertToType(data['load_index'], 'Number');
      }
      if (data.hasOwnProperty('speed_index')) {
        obj['speed_index'] = ApiClient.convertToType(data['speed_index'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/Pressure} tire_pressure
   */
  exports.prototype['tire_pressure'] = undefined;
  /**
   * Formatter rim size (e.g. `7Jx18 ET38`, can be __*`\"\"`*__)
   * @member {String} rim
   */
  exports.prototype['rim'] = undefined;
  /**
   * Rim diameter, in (e.g. `18.0`, can be __*`null`*__)
   * @member {Number} rim_diameter
   */
  exports.prototype['rim_diameter'] = undefined;
  /**
   * Rim width, in (e.g. `7.0`, can be __*`null`*__)
   * @member {Number} rim_width
   */
  exports.prototype['rim_width'] = undefined;
  /**
   * Rim offset, mm (e.g. `38.0`, can be __*`null`*__)
   * @member {Number} rim_offset
   */
  exports.prototype['rim_offset'] = undefined;
  /**
   * Formatted tire size (e.g. `225/55R18`, can be __*`\"\"`*__)
   * @member {String} tire
   */
  exports.prototype['tire'] = undefined;
  /**
   * Tire sizing system (e.g. `metric`, can be __*`null`*__)
   * @member {module:model/Wheel.TireSizingSystemEnum} tire_sizing_system
   */
  exports.prototype['tire_sizing_system'] = undefined;
  /**
   * Tire constriction code (e.g. `R`, can be __*`null`*__)
   * @member {module:model/Wheel.TireConstructionEnum} tire_construction
   */
  exports.prototype['tire_construction'] = undefined;
  /**
   * Tire width, mm (e.g. `225.0`, can be __*`null`*__)
   * @member {Number} tire_width
   */
  exports.prototype['tire_width'] = undefined;
  /**
   * Aspect ratio, % (e.g. `55.0`, can be __*`null`*__)
   * @member {Number} tire_aspect_ratio
   */
  exports.prototype['tire_aspect_ratio'] = undefined;
  /**
   * High flotation tire diameter, in (e.g. `31.0`, can be __*`null`*__)
   * @member {Number} tire_diameter
   */
  exports.prototype['tire_diameter'] = undefined;
  /**
   * High flotation section width, in (e.g. `10.5`, can be __*`null`*__)
   * @member {Number} tire_section_width
   */
  exports.prototype['tire_section_width'] = undefined;
  /**
   * Is an old tire with assumed aspect ratio 82%
   * @member {Boolean} tire_is_82series
   */
  exports.prototype['tire_is_82series'] = undefined;
  /**
   * Load index (e.g. `98`, can be __*`null`*__)
   * @member {Number} load_index
   */
  exports.prototype['load_index'] = undefined;
  /**
   * Speed rating (e.g. `H`, can be __*`null`*__)
   * @member {String} speed_index
   */
  exports.prototype['speed_index'] = undefined;


  /**
   * Allowed values for the <code>tire_sizing_system</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TireSizingSystemEnum = {
    /**
     * value: "metric"
     * @const
     */
    "metric": "metric",
    /**
     * value: "flotation"
     * @const
     */
    "flotation": "flotation",
    /**
     * value: "lt-metric"
     * @const
     */
    "lt-metric": "lt-metric",
    /**
     * value: "lt-numeric"
     * @const
     */
    "lt-numeric": "lt-numeric"  };

  /**
   * Allowed values for the <code>tire_construction</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TireConstructionEnum = {
    /**
     * value: "R"
     * @const
     */
    "R": "R",
    /**
     * value: "B"
     * @const
     */
    "B": "B",
    /**
     * value: "D"
     * @const
     */
    "D": "D"  };


  return exports;
}));


