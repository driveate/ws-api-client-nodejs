/**
 * Wheel Fitment API
 * The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.
 *
 * OpenAPI spec version: v1
 * Contact: info@wheel-size.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Generation', 'model/Market', 'model/Power', 'model/WheelPair'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Generation'), require('./Market'), require('./Power'), require('./WheelPair'));
  } else {
    // Browser globals (root is window)
    if (!root.ws_api_client) {
      root.ws_api_client = {};
    }
    root.ws_api_client.Vehicle = factory(root.ws_api_client.ApiClient, root.ws_api_client.Generation, root.ws_api_client.Market, root.ws_api_client.Power, root.ws_api_client.WheelPair);
  }
}(this, function(ApiClient, Generation, Market, Power, WheelPair) {
  'use strict';




  /**
   * The Vehicle model module.
   * @module model/Vehicle
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Vehicle</code>.
   * @alias module:model/Vehicle
   * @class
   */
  var exports = function() {
    var _this = this;
















  };

  /**
   * Constructs a <code>Vehicle</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Vehicle} obj Optional instance to populate.
   * @return {module:model/Vehicle} The populated <code>Vehicle</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('market')) {
        obj['market'] = Market.constructFromObject(data['market']);
      }
      if (data.hasOwnProperty('body')) {
        obj['body'] = ApiClient.convertToType(data['body'], 'String');
      }
      if (data.hasOwnProperty('trim')) {
        obj['trim'] = ApiClient.convertToType(data['trim'], 'String');
      }
      if (data.hasOwnProperty('slug')) {
        obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
      }
      if (data.hasOwnProperty('generation')) {
        obj['generation'] = Generation.constructFromObject(data['generation']);
      }
      if (data.hasOwnProperty('stud_holes')) {
        obj['stud_holes'] = ApiClient.convertToType(data['stud_holes'], 'Number');
      }
      if (data.hasOwnProperty('pcd')) {
        obj['pcd'] = ApiClient.convertToType(data['pcd'], 'Number');
      }
      if (data.hasOwnProperty('centre_bore')) {
        obj['centre_bore'] = ApiClient.convertToType(data['centre_bore'], 'Number');
      }
      if (data.hasOwnProperty('lock_type')) {
        obj['lock_type'] = ApiClient.convertToType(data['lock_type'], 'String');
      }
      if (data.hasOwnProperty('lock_text')) {
        obj['lock_text'] = ApiClient.convertToType(data['lock_text'], 'String');
      }
      if (data.hasOwnProperty('bolt_pattern')) {
        obj['bolt_pattern'] = ApiClient.convertToType(data['bolt_pattern'], 'String');
      }
      if (data.hasOwnProperty('power')) {
        obj['power'] = Power.constructFromObject(data['power']);
      }
      if (data.hasOwnProperty('engine_type')) {
        obj['engine_type'] = ApiClient.convertToType(data['engine_type'], 'String');
      }
      if (data.hasOwnProperty('fuel')) {
        obj['fuel'] = ApiClient.convertToType(data['fuel'], 'String');
      }
      if (data.hasOwnProperty('wheels')) {
        obj['wheels'] = ApiClient.convertToType(data['wheels'], [WheelPair]);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/Market} market
   */
  exports.prototype['market'] = undefined;
  /**
   * Body name. Used extensively for JDM market (e.g. `GG2W`, can be __*`null`*__)
   * @member {String} body
   */
  exports.prototype['body'] = undefined;
  /**
   * Trim name. It can be empty for models created for JDM market (e.g. `2.0`, can be __*`null`*__)
   * @member {String} trim
   */
  exports.prototype['trim'] = undefined;
  /**
   * Combined trim, body, and generation identifier. Non-unique through markets (e.g. `20-gg2w-iii-restyling`)
   * @member {String} slug
   */
  exports.prototype['slug'] = undefined;
  /**
   * @member {module:model/Generation} generation
   */
  exports.prototype['generation'] = undefined;
  /**
   * Number of stud holes (e.g. `5`, can be __*`null`*__)
   * @member {Number} stud_holes
   */
  exports.prototype['stud_holes'] = undefined;
  /**
   * Pitch circle diameter, mm (e.g. `105`, can be __*`null`*__)
   * @member {Number} pcd
   */
  exports.prototype['pcd'] = undefined;
  /**
   * Centre bore diameter, mm (e.g. `48.1`, can be __*`null`*__)
   * @member {Number} centre_bore
   */
  exports.prototype['centre_bore'] = undefined;
  /**
   * @member {module:model/Vehicle.LockTypeEnum} lock_type
   */
  exports.prototype['lock_type'] = undefined;
  /**
   * Lock thread size (e.g. `M12 x 1.25`, can be __*`null`*__)
   * @member {String} lock_text
   */
  exports.prototype['lock_text'] = undefined;
  /**
   * Bolt pattern (e.g. `5x105`, can be __*`N/A`*__)
   * @member {String} bolt_pattern
   */
  exports.prototype['bolt_pattern'] = undefined;
  /**
   * @member {module:model/Power} power
   */
  exports.prototype['power'] = undefined;
  /**
   * Engine type (e.g. `V8`, can be __*`null`*__)
   * @member {String} engine_type
   */
  exports.prototype['engine_type'] = undefined;
  /**
   * Fuel (e.g. `Petrol`, can be __*`null`*__)
   * @member {String} fuel
   */
  exports.prototype['fuel'] = undefined;
  /**
   * @member {Array.<module:model/WheelPair>} wheels
   */
  exports.prototype['wheels'] = undefined;


  /**
   * Allowed values for the <code>lock_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.LockTypeEnum = {
    /**
     * value: "nut"
     * @const
     */
    "nut": "nut",
    /**
     * value: "bolt"
     * @const
     */
    "bolt": "bolt"  };


  return exports;
}));


