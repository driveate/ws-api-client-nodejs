/**
 * Wheel Fitment API
 * The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.
 *
 * OpenAPI spec version: v1
 * Contact: info@wheel-size.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ws_api_client) {
      root.ws_api_client = {};
    }
    root.ws_api_client.Power = factory(root.ws_api_client.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Power model module.
   * @module model/Power
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Power</code>.
   * Power in different units (can be __*&#x60;null&#x60;*__)
   * @alias module:model/Power
   * @class
   * @param PS {Number} Power, PS (e.g. `169`)
   * @param hp {Number} Power, hp (e.g. `166`)
   * @param kW {Number} Power, kW (e.g. `124`)
   */
  var exports = function(PS, hp, kW) {
    var _this = this;

    _this['PS'] = PS;
    _this['hp'] = hp;
    _this['kW'] = kW;
  };

  /**
   * Constructs a <code>Power</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Power} obj Optional instance to populate.
   * @return {module:model/Power} The populated <code>Power</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('PS')) {
        obj['PS'] = ApiClient.convertToType(data['PS'], 'Number');
      }
      if (data.hasOwnProperty('hp')) {
        obj['hp'] = ApiClient.convertToType(data['hp'], 'Number');
      }
      if (data.hasOwnProperty('kW')) {
        obj['kW'] = ApiClient.convertToType(data['kW'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Power, PS (e.g. `169`)
   * @member {Number} PS
   */
  exports.prototype['PS'] = undefined;
  /**
   * Power, hp (e.g. `166`)
   * @member {Number} hp
   */
  exports.prototype['hp'] = undefined;
  /**
   * Power, kW (e.g. `124`)
   * @member {Number} kW
   */
  exports.prototype['kW'] = undefined;



  return exports;
}));


