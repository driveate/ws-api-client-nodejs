/**
 * Wheel Fitment API
 * The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.
 *
 * OpenAPI spec version: v1
 * Contact: info@wheel-size.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ws_api_client) {
      root.ws_api_client = {};
    }
    root.ws_api_client.Aggregation = factory(root.ws_api_client.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Aggregation model module.
   * @module model/Aggregation
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Aggregation</code>.
   * @alias module:model/Aggregation
   * @class
   * @param min {Number} Min aggregated value
   * @param max {Number} Max aggregated value
   * @param units {String} One of `mm, in, %`
   */
  var exports = function(min, max, units) {
    var _this = this;

    _this['min'] = min;
    _this['max'] = max;
    _this['units'] = units;
  };

  /**
   * Constructs a <code>Aggregation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Aggregation} obj Optional instance to populate.
   * @return {module:model/Aggregation} The populated <code>Aggregation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('min')) {
        obj['min'] = ApiClient.convertToType(data['min'], 'Number');
      }
      if (data.hasOwnProperty('max')) {
        obj['max'] = ApiClient.convertToType(data['max'], 'Number');
      }
      if (data.hasOwnProperty('units')) {
        obj['units'] = ApiClient.convertToType(data['units'], 'String');
      }
    }
    return obj;
  }

  /**
   * Min aggregated value
   * @member {Number} min
   */
  exports.prototype['min'] = undefined;
  /**
   * Max aggregated value
   * @member {Number} max
   */
  exports.prototype['max'] = undefined;
  /**
   * One of `mm, in, %`
   * @member {String} units
   */
  exports.prototype['units'] = undefined;



  return exports;
}));


